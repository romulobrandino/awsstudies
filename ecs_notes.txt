Summary Docker on AWS ECS - Elastic Container Service

ECS Elastic Container Service is a Docker-compatible container service provided by AWS.
It allows for easy and fast container deployment onto fleets of EC2 instances, with the added benefit of AWS highly available and fault-tolerant infrastructure.
ECS is great for distributed applications and microservices.

ECS Elastic Service 
ECS is a container management service that supports Docker.
It allows you to easily create and manage a fleet of Docker containers on a cluster of EC2 instances

Why use ECS/Containers?
Create distributed Applications and Microservices:
    Create application architecture comprising independent tasks or processes (microservices)
    For example, you can have separate containers for various components of your application:
        Web server
        Application server
        Message queue
        Back-end servers
    This allows you to start, stop, manage, monitor, and scale each container independently.
Batch and ETL Jobs:
    Packages batch and ETL jobs into containers and deploy them into a shared EC2 cluster(s).
    Run different versions of the same job or multiple jobs on the cluster.
    Share cluster capacity with other processes and/or grow jobs dynamically on demand to improve resource utulization.
Continuous Integration and Deployment
    By using Docker's image versioning, you can use containers for Continuous Integration and Deployment.
    Build processes can pull, build, and create Docker images for your containers.

AWS Fargate
Fargate is a way to use containers as the fundamental application building blocks while AWS manages the EC2 instances for you.

Docker is a software platform that allows you to build, test and deploy applications quickly. 
Docker packages software into standardized units called containers that have everything the software needs to run, including libraries, system tools, code, and runtime.
Using Docker, you can quickly deploy and scale applications into any environment and know your code will run.
Docker lets you ship code faster, standardize application operations, seamlessly move code, and save money by improving resource utilization.
With Docker, you get a single object that can reliably run anywhere.
Docker supports multiple containers per EC2 instance. 

Docker file:
A plaintext file (script) that specifies all the components that are included in the container.
Basically, it's the intructions for what will be placed inside a given container.

Container / Docker Image:
A container/Docker image is built from Docker file.
The container / Docker image contains all the downloaded software, code, runtime, system tools, libraries (as outlined in the Docker file).
e.g., if the Docker file specifies PHP to be downloaded and installed, then the container/Docker image will have PHP downloaded and installed.

Container Registry:
A container registry is a repository where container/Docker images are stored and accessed from when needed.
A container registry can be:
    Located on AWS via the ECR service (Elastic Container Registry)
    A third-party repository like Docker HUb
    Self-hosted registry.

ECS Agent:
The ECS agent runs on each EC2 instance in the ECS cluster.
It communicates information about the instances to ECS, including:
    Running task;
    Resource utilization
The ECS agent is also responsible for starting / stopping tasks (when told to by ECS)

ECS Task:
An ECS task is the actual representation of the task definition on an EC2 instance inside of your container cluster.
The ECS agent will start/stop these tasks based on instruction /schedule.

ECS Task Definition:
A JSON-formatted text file that contains the "blueprint" for your application, including:
    Which container / docker image to use.
    The repository (container registry) the image is located in
    Which ports should be open on the container instance
    Whar data volumes should be used with the containers



Each container should have only one concern. 
Decoupling applications into multiple containers makes it easier to scale horizontally and reuse containers. 
For instance, a web application stack might consist of three separate containers, each with its own unique image, to manage the web application, database, 
and in-memory cache in a decoupled manner. 




